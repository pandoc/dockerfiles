name: Alpine

on:
  push:
    # Build and publish: configure build via commit message
    branches:
      - master
  pull_request:
    # Build, but don't push on pull requests

jobs:
  configure:
    name: Configure
    runs-on: ubuntu-latest
    outputs:
      pandoc-version: ${{ steps.config-from-commit-message.outputs.pandoc-version }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.after }}
      - name: Configure build
        id: config-from-commit-message
        run: |
          # Determine PANDOC_VERSION for Makefile based on commit message. We
          # are looking for if the string `release=X.Y` or `release=X.Y.Z`
          # exists, if so then that is what we are going to build. Otherwise,
          # build the `master` branch (which is # the `edge` image).
          version="$(git log --pretty='%B' -1 | \
                     sed -ne 's#.*\brelease=\([0-9]*\(\.[0-9]*\)*\).*#\1#p')"

          if [ -z "$version" ]; then
              version="edge"
          fi

          printf "Setting outputs:\n"
          printf "  - pandoc-version: %s\n" "$version"

          printf "::set-output name=pandoc-version::%s\n" "$version"

  # Build images and store them as tar archive
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: configure

    env:
      PANDOC_VERSION: ${{ needs.configure.outputs.pandoc-version }}

    steps:
      - uses: actions/checkout@v2

      - name: Show config
        run: make show-args

      - name: Build core image
        run: make alpine

      - name: Build crossref image
        run: make alpine-crossref

      - name: Build LaTeX image
        run: make alpine-latex

      - name: Test core image
        run: make test-alpine

      - name: Test crossref image
        run: make test-alpine-crossref

      - name: Test LaTeX image
        run: make test-alpine-latex

      - name: Push
        if: github.event_name == 'push' && github.repository == 'pandoc/dockerfiles'
        run: |
          # Log into registry
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" |
            docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          make push-core  STACK=alpine
          make push-latex STACK=alpine
